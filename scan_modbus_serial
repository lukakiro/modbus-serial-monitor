#!/usr/bin/env python

# home : https://github.com/sourceperl/modbus-serial-monitor

# modbus/RTU python monitor (check serial frame between devices)

# format modbus RTU serial frame receive from a serial port to console stdout
# check with python2.7 and python3, and module serial 2.7 (don't work with 3.x timeout issue ?)

# synoptic :
#
#   RS-485 bus -> FTDI USB cable -> /dev/ttyUSBx -> this_script -> CSV modbus
#   RS-422                                                           decode
#   RS-232

# CSV out sample :
# DATE=2015-11-05T17:31:27.977;ERR=NO;FRAME=01-03-50-00-00-04-55-09;SLAVE=1;

# use it like this :
#   - help :
#       $ ./mb_rtu_mon.py -h
#   - see frame only for slave 17 :
#       $ ./mb_rtu_mon.py | grep SLAVE=0x11
#   - store all traffic on a file
#       $ ./mb_rtu_mon.py > modbus.log


import argparse
import sys
import serial
import struct
import time
from datetime import datetime

# some const 
SEP = ";"
PARITY = {'N': serial.PARITY_NONE, 'E': serial.PARITY_EVEN, 'O': serial.PARITY_ODD,
          'M': serial.PARITY_MARK, 'S': serial.PARITY_SPACE}
STOP = {'1': serial.STOPBITS_ONE, '1.5': serial.STOPBITS_ONE_POINT_FIVE, '2': serial.STOPBITS_TWO}


def frame2crc(frame):
    """Compute modbus CRC16 (for RTU mode)

    :param label: modbus frame
    :type label: str (Python2) or class bytes (Python3)
    :returns: CRC16
    :rtype: int
    """
    crc = 0xFFFF
    for index, item in enumerate(bytearray(frame)):
        next_byte = item
        crc ^= next_byte
        for i in range(8):
            lsb = crc & 1
            crc >>= 1
            if lsb:
                crc ^= 0xA001
    return crc


if __name__ == '__main__':
    # parse args
    parser = argparse.ArgumentParser()
    parser.add_argument('-d', '--device', type=str, default='/dev/ttyUSB0',
                        help='device (default is /dev/ttyUSB0)')
    parser.add_argument('-b', '--baudrate', type=int, default=9600,
                        help='baudrate (default is 9600)')
    parser.add_argument('-p', '--parity', type=str, default='N', choices=['N', 'E', 'O', 'M', 'S'],
                        help='parity (default is N)')
    parser.add_argument('-s', '--stop', type=str, default='1', choices=['1', '1.5', '2'],
                        help='stop (default is 1)')
    args = parser.parse_args()

    # parity

    # modbus end of frame is a tx silent of [3.5 * byte tx time + 30% margin] seconds
    inter_char_wait = (1.0 / args.baudrate) * 11.0 * 3.5 * 1.30

    # init serial object
    ser = serial.Serial(args.device, args.baudrate, parity=PARITY[args.parity], stopbits=STOP[args.stop],
                        timeout=inter_char_wait)

    # wait serial start and flush all
    time.sleep(.5)
    ser.read(ser.inWaiting())

    # main loop
    while True:
        frame = bytes(ser.read(256))
        # skip null frame
        if not frame:
            continue
        # init vars
        err_str = "NO"
        slave_id = 0
        f_code = 0
        e_code = 0
        # add date and time
        now = datetime.now()
        date = now.strftime("%Y-%m-%dT%H:%M:%S.%f")[:-3]
        # format modbus frame as txt string
        txt_frame = ''
        for item in bytearray(frame):
            if txt_frame:
                txt_frame += "-"
            txt_frame += "%02x" % item
        # check short frame
        if len(frame) >= 5:
            # check CRC
            r_crc = struct.unpack("<H", frame[-2:])[0]
            c_crc = frame2crc(frame[:-2])
            crc_ok = (r_crc == c_crc)
            if not crc_ok:
                err_str = "BAD_CRC"
            else:
                # slave ID
                slave_id = struct.unpack("B", frame[0:1])[0]
                # function code
                f_code = struct.unpack("B", frame[1:2])[0]
                # except code
                if f_code > 0x80:
                    err_str = "EXCEPT_FRAME"
                    e_code = struct.unpack("B", frame[2:3])[0]
        else:
            err_str = "SHORT_FRAME"
        # send result to stdout
        items = ['DATE=%s' % date, 'ERR=%s' % err_str, 'FRAME=%s' % txt_frame, 'SLAVE=%s' % slave_id]
        csv_line = SEP.join(items)
        print(csv_line)
        sys.stdout.flush()

    ser.close()
